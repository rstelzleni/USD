//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#ifndef PXR_USD_IMAGING_USD_IMAGING_MATERIAL_BINDINGS_SCHEMA_H
#define PXR_USD_IMAGING_USD_IMAGING_MATERIAL_BINDINGS_SCHEMA_H

/// \file

#include "pxr/usdImaging/usdImaging/api.h"

#include "pxr/imaging/hd/schema.h"

// --(BEGIN CUSTOM CODE: Includes)--
#include "pxr/imaging/hd/vectorSchema.h"
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

// --(BEGIN CUSTOM CODE: Declares)--
using UsdImagingMaterialBindingVectorSchema = HdSchemaBasedVectorSchema<
    class UsdImagingMaterialBindingSchema>;
// --(END CUSTOM CODE: Declares)--

#define USD_IMAGING_MATERIAL_BINDINGS_SCHEMA_TOKENS \
    (usdMaterialBindings) \
    ((allPurpose, "")) \

TF_DECLARE_PUBLIC_TOKENS(UsdImagingMaterialBindingsSchemaTokens, USDIMAGING_API,
    USD_IMAGING_MATERIAL_BINDINGS_SCHEMA_TOKENS);

//-----------------------------------------------------------------------------

// The UsdImagingMaterialBindingsSchema specifies a container for all the
// material bindings declared on a prim. The material binding purpose serves
// as the key, with the value being a vector of
// UsdImagingMaterialBindingSchema. While one entry (element) would suffice
// for a prim's material bindings opinion, we use a vector for aggregating
// ancestor material bindings to model the inheritance semantics of
// UsdShadeMaterialBindingAPI.
//

class UsdImagingMaterialBindingsSchema : public HdSchema
{
public:
    /// \name Schema retrieval
    /// @{

    UsdImagingMaterialBindingsSchema(HdContainerDataSourceHandle container)
      : HdSchema(container) {}

    /// Retrieves a container data source with the schema's default name token
    /// "usdMaterialBindings" from the parent container and constructs a
    /// UsdImagingMaterialBindingsSchema instance.
    /// Because the requested container data source may not exist, the result
    /// should be checked with IsDefined() or a bool comparison before use.
    USDIMAGING_API
    static UsdImagingMaterialBindingsSchema GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer);

    /// @}

// --(BEGIN CUSTOM CODE: Schema Methods)--

    /// Returns the purposes for which bindings may be available.
    /// \note This API is preferable to schema.GetContainer()->GetNames().
    USDIMAGING_API
    TfTokenVector GetPurposes() const;

    /// Returns the bindings for 'allPurpose'.
    USDIMAGING_API
    UsdImagingMaterialBindingVectorSchema GetMaterialBindings() const;

    /// Returns the bindings for the given purpose.
    USDIMAGING_API
    UsdImagingMaterialBindingVectorSchema
    GetMaterialBindings(const TfToken &purpose) const;

// --(END CUSTOM CODE: Schema Methods)--

    /// \name Member accessor
    /// @{ 

    /// @}

    /// \name Schema location
    /// @{

    /// Returns a token where the container representing this schema is found in
    /// a container by default.
    USDIMAGING_API
    static const TfToken &GetSchemaToken();

    /// Returns an HdDataSourceLocator (relative to the prim-level data source)
    /// where the container representing this schema is found by default.
    USDIMAGING_API
    static const HdDataSourceLocator &GetDefaultLocator();

    /// @} 

    /// \name Schema construction
    /// @{

    /// @}
};

PXR_NAMESPACE_CLOSE_SCOPE

#endif