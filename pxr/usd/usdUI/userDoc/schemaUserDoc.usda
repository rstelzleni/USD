#usda 1.0
(
    "This file describes the USD UI schemata for code generation."
    subLayers = [
        # Sublayer "parent" user doc to get user doc for inherited properties.
        #@../../usd/userDoc/schemaUserDoc.usda@,        
        # Sublayer domain schema.usda to get proper schema inheritance structure 
        # and property fallback values. User doc is added as overs to schema 
        # class metadata. 
        @../schema.usda@
    ]
)

over "GLOBAL" (
    customData = {
        string libraryName = "usdUI"
        string userDocTitle = "UI"
    }
)
{
}

over "NodeGraphNodeAPI"(
    customData = {
        string userDocBrief = """NodeGraphNodeAPI stores information about nodes 
within a node graph. This information includes node display UI hints (node 
color, icon, etc.) and layout hits (node position and size)."""
        string userDoc = """NodeGraphNodeAPI stores information about nodes 
within a node graph.

Nodes in node graphs have common attributes such as their position 
(`ui:nodegraph:node:pos`), color (`ui:nodegraph:node:displayColor`),
z-index or relative depth strength (`ui:nodegraph:node:stackingOrder`), among 
others. `NodeGraphNodeAPI` allows users to specify this type of node 
information.

The example below shows a typical use case for shader nodes with two nodes 
`Preview Surface` and `Color`. We can infer from the example the following 
information:
- We expect that the `Preview Surface` node will be red, while the `Color` node 
will be blue.
- The associated doc links are provided for the user to get more node info.
- `Preview Surface` is `open` and `Color` is `closed`. How the expansion state 
will be presented will depend on the context or tool the nodes are viewed in, 
but it's expected that `Preview Surface` reveals more information than `Color`.
- The icons come from different files and are meant to be descriptive for the 
nodes, not the content of the nodes.
- They are in different positions.
- `Preview Surface` node is larger than the `Color` node.
- If overlapping, `Color` will be shown above or on top of `Preview Surface`.

```{code-block} usda
def Material "MyMaterial"
{
    token outputs:mtlx:surface.connect = </World/MyMaterial/PreviewSurface.outputs:out>

    def Shader "PreviewSurface"
    {
        uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
        color3f inputs:diffuseColor.connect = </World/MyMaterial/Color.outputs:out>
        token outputs:out

        uniform color3f ui:nodegraph:node:displayColor = (1.0, 0.0, 0.0)
        uniform string ui:nodegraph:node:docURI = "https://openusd.org/release/spec_usdpreviewsurface.html"
        uniform token ui:nodegraph:node:expansionState = "open"
        uniform asset ui:nodegraph:node:icon = @preview_surface_icon.png@
        uniform float2 ui:nodegraph:node:pos = (-0.85, 1.9)
        uniform float2 ui:nodegraph:node:size = (300.0, 400.0)
        uniform int ui:nodegraph:node:stackingOrder = 1
    }

    def Shader "Color"
    {
        uniform token info:id = "ND_constant_color3"
        color3f inputs:value = (1.0, 0.023, 0.701)
        color3f outputs:out

        uniform color3f ui:nodegraph:node:displayColor = (0.0, 0.0, 1.0)
        uniform string ui:nodegraph:node:docURI = "https://github.com/AcademySoftwareFoundation/MaterialX/blob/main/documents/Specification/MaterialX.Specification.md#procedural-nodes"
        uniform token ui:nodegraph:node:expansionState = "closed"
        uniform asset ui:nodegraph:node:icon = @color_icon.png@
        uniform float2 ui:nodegraph:node:pos = (-2, 2)
        uniform float2 ui:nodegraph:node:size = (100.0, 200.0)
        uniform int ui:nodegraph:node:stackingOrder = 2
    }
}
```
        """
    }
) {
    uniform float2 ui:nodegraph:node:pos (
        customData = {
            string userDocBrief = """An x,y coordinate pair expressing the 
location of the node."""
            string userDoc = """An x,y coordinate pair expressing the location 
of the node.

If the node has a parent, this position will be relative to the parent. 

The Y coordinate is intended to increase going down. For example -1.0 would be 
higher than 1.0. These units are not meant to be in pixel space, but represent 
the size of a typical node.
"""
        }
    )

    uniform int ui:nodegraph:node:stackingOrder (
        customData = {
            string userDocBrief = """The order in which a node should be 
displayed in the case of overlapping nodes."""
            string userDoc = """The order in which a node should be displayed in 
the case of overlapping nodes.

Nodes with higher stackingOrder values are intended to be drawn on top of nodes 
lower stackingOrder values.
"""
        }
    )

    uniform color3f ui:nodegraph:node:displayColor (
        customData = {
            string userDocBrief = """The color of the node."""
            string userDoc = """The color of the node."""
        }
    )

    uniform asset ui:nodegraph:node:icon (
        customData = {
            string userDocBrief = """An image to classify the node."""
            string userDoc = """An image to classify the node.

Meant to help describe the node itself, not the result of the action. For 
example with an Add node, an icon might be a + sign.
"""
        }
    )

    uniform token ui:nodegraph:node:expansionState (
        customData = {
            string userDocBrief = """Shows the current size or status of the 
node. Either open, closed, or minimized."""
            string userDoc = """Shows the current size or status of the node. 
Either open, closed, or minimized."""
        }
    )

    uniform float2 ui:nodegraph:node:size (
        customData = {
            string userDocBrief = """Optional x,y dimensions for the node."""
            string userDoc = """Optional x,y dimensions for the node, in pixels.

This is optional because the size of the node can be generated by its number of 
inputs and outputs.
            """
        }
    )

    uniform string ui:nodegraph:node:docURI (
        customData = {
            string userDocBrief = """A URI formatted link that points to 
documentation for the node."""
            string userDoc = """A URI formatted link that points to 
documentation for the node."""
        }
    )
}


over "SceneGraphPrimAPI"(
    customData = {
        string userDocBrief = """SceneGraphPrimAPI provides a way to add 
descriptive information to the node graph. """
        string userDoc = """SceneGraphPrimAPI provides a way to add descriptive 
information to the node graph.

Consider the following example:

```{code-block} usda
def Material "MyMaterial"
{
    token outputs:mtlx:surface.connect = </World/MyMaterial/PreviewSurface.outputs:out>

    def Shader "PreviewSurface" (
        prepend apiSchemas = ["SceneGraphPrimAPI"]
    )
    {
        uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
        color3f inputs:diffuseColor.connect = </World/MyMaterial/Color.outputs:out>
        token outputs:out

        uniform token ui:displayGroup = "MyMaterial Nodes"
        uniform token ui:displayName = "Preview Surface Node"
    }

    def Shader "Color" (
        prepend apiSchemas = ["SceneGraphPrimAPI"]
    )
    {
        uniform token info:id = "ND_constant_color3"
        color3f inputs:value = (1, 0.023, 0.701)
        color3f outputs:out

        uniform token ui:displayGroup = "MyMaterial Nodes"
        uniform token ui:displayName = "Color Node"
    }
}
```

The two shader nodes, `PreviewSurface` and `Color`, can have their own 
descriptive names (`ui:displayName`). They can also belong to a display group 
(`ui:displayGroup`), allowing groups of nodes to be displayed in an organized 
way.
"""
    }
) {
    uniform token ui:displayName (
        customData = {
            string userDocBrief = """A descriptive name for the node, 
potentially distinct from its UsdPrim displayName."""
            string userDoc = """A descriptive name for the node within the 
context of its connected node graph, which may be distinct from its core 
Prim displayName.
"""
        }
    )
    uniform token ui:displayGroup (
        customData = {
            string userDocBrief = """A descriptive name for the group to which 
the node belongs, potentially distinct from any other USD grouping feature
name."""
            string userDoc = """A descriptive name for the group to which the 
node belongs, within the context of its connected node graph. This group
name may be distinct from any other USD grouping feature name used for the node
(e.g. associated Scope name, parent Prim name, etc.).
"""
        }
    )
}

over Backdrop "Backdrop" (
    customData = {
        string userDocBrief = """Backdrop is a visual indication of a grouping 
of nodes."""
        string userDoc = """Backdrop is a visual indication of a grouping of 
nodes.
        
The Backdrop can take the form of a colored rectangle, making it easier to see 
node groupings in the node graph.

Consider the following example:

```{code-block} usda
def Material "MyMaterial"
{
    token outputs:mtlx:surface.connect = </World/Material/PreviewSurface.outputs:out>

    def Shader "PreviewSurface" (
        prepend apiSchemas = ["NodeGraphNodeAPI"]
    )
    {
        uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
        color3f inputs:diffuseColor.connect = </World/Material/Color.outputs:out>
        token outputs:out

        uniform float2 ui:nodegraph:node:pos = (-0.85, 1.9)
    }

    def Shader "Color" (
        prepend apiSchemas = ["NodeGraphNodeAPI"]
    )
    {
        uniform token info:id = "ND_constant_color3"
        color3f inputs:value = (1, 0.023, 0.701)
        color3f outputs:out

        uniform float2 ui:nodegraph:node:pos = (-2, 2)
    }

    def Backdrop "Backdrop" (
        prepend apiSchemas = ["NodeGraphNodeAPI"]
    )
    {
        uniform token ui:description = "MyMaterial Nodes"
        uniform color3f ui:nodegraph:node:displayColor = (1, 0, 0)
        uniform float2 ui:nodegraph:node:pos = (-0.8, 0.5)
        uniform float2 ui:nodegraph:node:size = (450, 330)
    }
}
```

Observe the positions, with the backdrop starting at an x-coordiante of -0.8, 
`PreviewSurface` at -0.85, and `Color` at -2.0. The backdrop’s width of 450 
highlights the contrast between size and position units. While a typical node 
may be around 200px wide, this setup ensures that the backdrop covers both nodes.
Observing the y-coordinates of 0.5, 1.9, and 2, it should be noted that the 
Y-coordinate increases as you move downward. This means the backdrop is 
positioned above both nodes and extends 330px downward. The backdrop appears in 
red and is labeled `MyMaterial Nodes`.
"""
    }
)
{
    uniform token ui:description (
        customData = {
            string userDocBrief = """A description for the backdrop."""
            string userDoc = """A description for the backdrop.

For example, when creating custom noise with multiple nodes, using a description 
of 'Noise' helps indicate that these nodes contribute to overall noise 
generation.
"""
        }
    )
}

over "AccessibilityAPI" (
    customData = {
        string userDocBrief = """Specifies accessibility information for a 
prim, usable in tools that support accessibility features such as 
voice controls or screen readers."""
        string userDoc = """This schema describes accessibility information on 
a Prim that may be surfaced to a given runtime's accessibility frameworks. This 
information may be used by assistive tooling such as voice controls or screen 
readers.

Accessibility information is provided as a standard triplet of label, 
description, and priority. 

```{code-block} usda
def Mesh "Cube" (
    prepend apiSchemas = ["AccessibilityAPI"]
) {
    string accessibility:default:label = "Luxo, Jr"
    string accessibility:default:description = "The lamp has round base with two sections above it that may be adjusted. It has a conical head with a lightbulb inside. It likes to chase inflatable balls"
    token accessibility:default:priority = "standard"
}
```

This is a multiple apply schema, and so may have multiple namespaced 
accessibility triplets, where a instance name may reflect a given purpose for 
that triplet. For example, you may desire to express different information for 
different aspects of the prim, such as size or color. Note that this schema will 
use "default" as an instance name if no namespace is specified.

There are several best practices for using this schema.:

- Most accessibility runtimes support a single accessibility description.
Therefore we recommend placing any critical information in the default
instance.

- A default value should be authored if using time sampled accessibility
information. This helps accessibility runtimes that do not currently
support time sampled information.

- Provide accessibility information of your scene on the default prim
of the layer, and any root level prims. This allows accessibility systems to
provide concise scene descriptions to a user, but also allows supporting
accessibility systems that either do not support hierarchy information or
when a user has turned off that level of granularity. Accessibility
information may still be provided on other prims in the hierarchy.

The use of the default prim and root level prims for scene accessibility 
descriptions is a recommended convention. Outside of that, accessibility 
information is not implicitly inherited through a prim hierarchy. 
"""
    }    
) {
    string label (
        customData = {
            string userDocBrief = """A short label to concisely describe the 
prim."""
            string userDoc = """A short label to concisely describe the prim.
It is not recommended to time vary the label unless the concise description 
changes substantially.

There is no specific suggested length for the label, but it is recommended to 
keep it succinct.
"""
        }
    )

    string description (
        customData = {
            string userDocBrief = """An extended description of the prim to 
provide more details."""
            string userDoc = """An extended description of the prim to provide 
more details. If a label attribute is not authored in a given instance name,
the description attribute should not be used in it its place. A description is 
an optional attribute, and some accessibility systems may only use the label.

Descriptions may be time varying for runtimes that support it. For example, you 
may describe what a character is doing at a given time.
"""
        }
    )

    uniform token priority (
        customData = {
            string userDocBrief = """A hint to the accessibility runtime of how 
to prioritize this instance's label and description, relative to others.
Allowed tokens are "low", "standard", and "high"."""
            string userDoc = """A hint to the accessibility runtime of how to 
prioritize this instance's label and description, relative to others. Allowed 
tokens are "low", "standard", and "high".

This attribute is optional and is considered a hint that runtimes may ignore.

Priority may not be time varying.
"""
        }
    )
}