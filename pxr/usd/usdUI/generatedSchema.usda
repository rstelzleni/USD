#usda 1.0
(
    "WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT."
)

class "NodeGraphNodeAPI" (
    customData = {
        string userDocBrief = """NodeGraphNodeAPI stores information about nodes 
within a node graph. This information includes node display UI hints (node 
color, icon, etc.) and layout hits (node position and size)."""
    }
    doc = """
    This api helps storing information about nodes in node graphs.
    """
)
{
    uniform color3f ui:nodegraph:node:displayColor (
        customData = {
            string userDocBrief = "The color of the node."
        }
        doc = """
        This hint defines what tint the node should have in the node graph.
        """
    )
    uniform string ui:nodegraph:node:docURI (
        customData = {
            string userDocBrief = """A URI formatted link that points to 
documentation for the node."""
        }
        displayGroup = "Help"
        displayName = "Doc Link"
        doc = """ 
        A URI pointing to additional detailed documentation for this 
        node or node type.
        """
    )
    uniform token ui:nodegraph:node:expansionState (
        allowedTokens = ["open", "closed", "minimized"]
        customData = {
            string userDocBrief = """Shows the current size or status of the 
node. Either open, closed, or minimized."""
        }
        doc = """ 
        The current expansionState of the node in the ui. 
        'open' = fully expanded
        'closed' = fully collapsed
        'minimized' = should take the least space possible
        """
    )
    uniform asset ui:nodegraph:node:icon (
        customData = {
            string userDocBrief = "An image to classify the node."
        }
        doc = """
        This points to an image that should be displayed on the node.  It is 
        intended to be useful for summary visual classification of nodes, rather
        than a thumbnail preview of the computed result of the node in some
        computational system.
        """
    )
    uniform float2 ui:nodegraph:node:pos (
        customData = {
            string userDocBrief = """An x,y coordinate pair expressing the 
location of the node."""
        }
        doc = """
        Declared relative position to the parent in a node graph.
        X is the horizontal position.
        Y is the vertical position. Higher numbers correspond to lower positions 
        (coordinates are Qt style, not cartesian).

        These positions are not explicitly meant in pixel space, but rather
        assume that the size of a node is approximately 1.0x1.0. Where size-x is
        the node width and size-y height of the node. Depending on 
        graph UI implementation, the size of a node may vary in each direction.

        Example: If a node's width is 300 and it is position is at 1000, we
        store for x-position: 1000 * (1.0/300)
        """
    )
    uniform float2 ui:nodegraph:node:size (
        customData = {
            string userDocBrief = "Optional x,y dimensions for the node."
        }
        doc = """
        Optional size hint for a node in a node graph.
        X is the width.
        Y is the height.

        This value is optional, because node size is often determined 
        based on the number of in- and outputs of a node.
        """
    )
    uniform int ui:nodegraph:node:stackingOrder (
        customData = {
            string userDocBrief = """The order in which a node should be 
displayed in the case of overlapping nodes."""
        }
        doc = """
        This optional value is a useful hint when an application cares about 
        the visibility of a node and whether each node overlaps another.
        
        Nodes with lower stacking order values are meant to be drawn below 
        higher ones. Negative values are meant as background. Positive values
        are meant as foreground.
        Undefined values should be treated as 0. 

        There are no set limits in these values.
        """
    )
}

class "SceneGraphPrimAPI" (
    customData = {
        string userDocBrief = """SceneGraphPrimAPI provides a way to add 
descriptive information to the node graph. """
    }
    doc = """
    Utility schema for display properties of a prim
    """
)
{
    uniform token ui:displayGroup (
        customData = {
            string userDocBrief = """A descriptive name for the group to which 
the node belongs, potentially distinct from any other USD grouping feature
name."""
        }
        doc = """When publishing a nodegraph or a material, it can be useful to
        provide an optional display group, for organizational purposes and 
        readability. This is because often the usd shading hierarchy is rather
        flat while we want to display it in organized groups.
        """
    )
    uniform token ui:displayName (
        customData = {
            string userDocBrief = """A descriptive name for the node, 
potentially distinct from its UsdPrim displayName."""
        }
        doc = """When publishing a nodegraph or a material, it can be useful to
        provide an optional display name, for readability.
        """
    )
}

class Backdrop "Backdrop" (
    customData = {
        string userDocBrief = """Backdrop is a visual indication of a grouping 
of nodes."""
    }
    doc = """Provides a 'group-box' for the purpose of node graph organization.

    Unlike containers, backdrops do not store the Shader nodes inside of them.
    Backdrops are an organizational tool that allows Shader nodes to be visually 
    grouped together in a node-graph UI, but there is no direct relationship 
    between a Shader node and a Backdrop. 

    The guideline for a node-graph UI is that a Shader node is considered part 
    of a Backdrop when the Backdrop is the smallest Backdrop a Shader node's 
    bounding-box fits inside.

    Backdrop objects are contained inside a NodeGraph, similar to how Shader 
    objects are contained inside a NodeGraph.

    Backdrops have no shading inputs or outputs that influence the rendered
    results of a NodeGraph. Therefore they can be safely ignored during import.

    Like Shaders and NodeGraphs, Backdrops subscribe to the NodeGraphNodeAPI to 
    specify position and size.
    """
)
{
    uniform token ui:description (
        customData = {
            string userDocBrief = "A description for the backdrop."
        }
        doc = """The text label that is displayed on the backdrop in the node
        graph. This help-description explains what the nodes in a backdrop do.
        """
    )
}

class "AccessibilityAPI" (
    customData = {
        string userDocBrief = """Specifies accessibility information for a 
prim, usable in tools that support accessibility features such as 
voice controls or screen readers."""
    }
    doc = """
    This API describes Accessibility information on a Prim that may be
    surfaced to a given runtime's accessibility frameworks.
    This information may be used by assistive tooling such as voice controls
    or screen readers.
    Accessibility information is provided as a standard triplet of label,
    description and priority.

    OpenUSD does not provide a accessibility runtime itself, but endeavours
    to provide the information needed for compatible runtimes to extract and
    present this information.

    This is a multiple apply schema, and so may have multiple namespaced
    accessibility triplets, where a instance name may reflect a given purpose
    for that triplet. For example, you may desire to express different
    information for different aspects of the prim, such as size or color.

    \\note The API will use \"default\" as an instance name if no
    namespace is specified.
    
    There are several best practices for using this schema.:

    - Most accessibility runtimes support a single accessibility description.
    Therefore we recommend placing any critical information in the default
    instance.

    - A default value should be authored if using time sampled accessibility
    information. This helps accessibility runtimes that do not currently
    support time sampled information.

    - Provide accessibility information of your scene on the default prim
    of the layer, and any top level prims. This allows accessibility systems to
    provide concise scene descriptions to a user, but also allows supporting
    accessibility systems that either do not support hierarchy information or
    when a user has turned off that level of granularity. Accessibility
    information may still be provided on other prims in the hierarchy.

    \\note The use of the default prim and top level prims for scene
    accessibility descriptions is a recommended convention. Outside of that,
    accessibility information is not implicitly inherited through a prim
    hierarchy. The inheritance should be left to the accessibility runtime to
    decide how best to surface information to users."""
)
{
    string accessibility:__INSTANCE_NAME__:description (
        doc = """An extended description of the prim to provide more details.
        If a label attribute is not authored in a given instance name,
        the description attribute should not be used in it its place. A
        description is an optional attribute, and some accessibility systems
        may only use the label.

        Descriptions may be time varying for runtimes that support it. For
        example, you may describe what a character is doing at a given time.
        """
    )
    string accessibility:__INSTANCE_NAME__:label (
        doc = """A short label to concisely describe the prim.
        It is not recommended to time vary the label unless the concise
        description changes substantially.

        There is no specific suggested length for the label, but it is
        recommended to keep it succinct."""
    )
    uniform token accessibility:__INSTANCE_NAME__:priority = "standard" (
        allowedTokens = ["low", "standard", "high"]
        doc = """A hint to the accessibility runtime of how to prioritize this
        instance's label and description, relative to others.

        This attribute is optional and is considered a hint that runtimes may
        ignore, if they feel there are other necessities that take precedence
        over the prioritization values.

        Priority may not be time varying.
        """
    )
}

