#sdf 1.4.32
(
    """
    This museum case demonstrates the basic behavior of the specializes arc.
    """
)

class "BasicSpecializes1" (
    specializes = </BasicSpecializes2>
)
{
}

class "BasicSpecializes2"
{
}

def "Basic" (
    # This test case just exercises a simple chain of root specializes
    # in the local layer stack.
    specializes = </BasicSpecializes1>
)
{
}

def "BasicLocal"
{
    class "Specializes1" (
        specializes = </BasicLocal/Specializes2>
    )
    {
    }

    class "Specializes2"
    {
    }

    def "Local" (
        # This test case just exercises a simple chain of subroot specializes
        # in the local layer stack.
        specializes = </BasicLocal/Specializes1>
    )
    {
    }
}

over "Base"
{
}

over "Specializes"
{
}

def "Root" (
    # This basic test case has a specializes arc to a class hierarchy
    # involving </Specializes> and </Base> defined across the reference. 
    # Opinions in this hierarchy in both the reference layer stack and
    # this layer stack are included in this prim. However, these
    # opinions are weaker than all other opinions.
    references = @./ref.sdf@</Ref>
)
{
}

over "_class_Material"
{
}

def "Model" (
    # This test case has a mixture of local and global specializes
    # arcs defined across the reference. Again, the opinions from
    # across the specializes arcs are weaker than all other opinions.
)
{
    def "Looks" (
        references = @./looks.sdf@</Looks>
    )
    {
        over "Material"
        {
        }

        over "Metal"
        {
        }

        over "Brass"
        {
        }
    }
}

over "Specializes_1"
{
}

over "Specializes_2"
{
}

def "MultipleSpecializes" (
    # This test case shows the behavior when multiple specializes
    # arcs are defined. The specializes opinions are still weaker than
    # the local opinions and the reference opinions, but their relative
    # strength ordering is defined by the order of the specializes arcs.
    references = @./ref.sdf@</Multi>
)
{
}

def "NonExistentSpecializes" (
    """
    This example demonstrates the behavior when there are specializes arcs
    targeting prims with no opinions. In particular, this is not considered
    a composition error.
    """
    references = @./ref.sdf@</NonExistentSpecializes>
)
{
}

def "MultipleRefsAndSpecializes" (
    references = @./ref.sdf@</Ref_1>
)
{
}