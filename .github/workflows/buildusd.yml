name: BuildUSD

on:
  push:
    branches:
      - dev
      - release
  issue_comment:
    types: [created]

jobs:
  GetUser:
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    outputs:
      require-result: ${{ steps.check.outputs.require-result }}
    steps:
      - uses: actions-cool/check-user-permission@v2
        id: check
        with:
          require: 'write'
          username: ${{ github.event.comment.user.login }}

  GetGitRef:
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    outputs:
      ref: ${{ steps.setter.outputs.ref }}
    steps:
      - name: Get push ref
        if: ${{ github.event_name == 'push' }}
        run: |
          echo "REF=${{ github.ref }}" >> $GITHUB_ENV
      - name: Get PR ref
        if: ${{ github.event.issue.pull_request }}
        run: |
          echo "REF=refs/pull/${{ github.event.issue.number }}/merge" >> $GITHUB_ENV
      - name: Print ENV_VAR
        run: |
          echo "The value of REF is $REF"
      - name: Set ENV_VAR
        id: setter
        run: |
          echo "ref=$REF" >> "$GITHUB_OUTPUT"

  Linux:
    needs:
      - GetUser
      - GetGitRef
    if: ${{ (github.event.issue.pull_request && contains(github.event.comment.body, '/AzurePipelines run') && needs.GetUser.outputs.require-result == 'true' ) || github.event_name == 'push' }}
    runs-on: ubuntu-22.04
    env:
      PYTHON_VERSION: "3.9"
    timeout-minutes: 120
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{needs.GetGitRef.outputs.ref}}
      - name: Restore cached artifacts
        id: cache-usd-build-dependency
        uses: actions/cache/restore@v4
        with:
          path: |
            USDinst
          key: ${{ runner.os }}-BuildUSD-py${{ env.PYTHON_VERSION }}-${{ hashFiles('build_scripts/**/*') }}
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          check-latest: false
      - name: Install dependencies
        run: |
          sudo apt-get -qq update
          sudo apt-get install -y python3-setuptools libglew-dev libxrandr-dev libxcursor-dev libxinerama-dev libxi-dev
          pip install --upgrade pip
          pip install PySide2 PyOpenGL
      - name: Build USD
        run: |
          # Not using '--tests' to avoid building extra dependencies that are unneeded for headless tests
          python3 build_scripts/build_usd.py --no-materialx --build USDgen/build --src USDgen/src USDinst --build-args USD,"-DPXR_HEADLESS_TEST_MODE=ON -DPXR_BUILD_TESTS=ON" -v
      - name: Save build artifacts to cache
        if: steps.cache-usd-build-dependency.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            USDinst
          key: ${{ steps.cache-usd-build-dependency.outputs.cache-primary-key }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: usd-linux
          path: USDinst
      - name: Test USD
        working-directory: ./USDgen/build/OpenUSD
        run: |
          ctest -V -C Release

  macOS:
    needs:
      - GetUser
      - GetGitRef
    if: ${{ (github.event.issue.pull_request && contains(github.event.comment.body, '/AzurePipelines run') && needs.GetUser.outputs.require-result == 'true' ) || github.event_name == 'push' }}
    runs-on: macos-13
    env:
      PYTHON_VERSION: "3.11"
    timeout-minutes: 120
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{needs.GetGitRef.outputs.ref}}
      - name: Restore cached artifacts
        id: cache-usd-build-dependency
        uses: actions/cache/restore@v4
        with:
          path: |
            USDinst
          key: ${{ runner.os }}-BuildUSD-py${{ env.PYTHON_VERSION }}-${{ hashFiles('build_scripts/**/*') }}
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          check-latest: false
      - name: Install dependencies
        run: |
          export PATH=/Applications/CMake.app/Contents/bin:$PATH
          sudo xcode-select -s /Applications/Xcode_14.1.app/Contents/Developer
          # Set SYSTEM_VERSION_COMPAT while installing Python packages to
          # accommodate the macOS version numbering change from 10.x to 11
          export SYSTEM_VERSION_COMPAT=1
          pip install PySide6 PyOpenGL setuptools
          export -n SYSTEM_VERSION_COMPAT
      - name: Build USD
        run: |
          # Not using '--tests' to avoid building extra dependencies that are unneeded for headless tests
          export PATH=/Applications/CMake.app/Contents/bin:$PATH
          python3 build_scripts/build_usd.py --no-materialx --generator Xcode --build USDgen/build --src USDgen/src USDinst --build-args USD,"-DPXR_HEADLESS_TEST_MODE=ON -DPXR_BUILD_TESTS=ON" -v
      - name: Save build artifacts to cache
        if: steps.cache-usd-build-dependency.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            USDinst
          key: ${{ steps.cache-usd-build-dependency.outputs.cache-primary-key }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: usd-macOS
          path: USDinst
      - name: Test USD
        working-directory: ./USDgen/build/OpenUSD
        run: |
          export PATH=/Applications/CMake.app/Contents/bin:$PATH
          ctest -V -C Release

  Windows:
    needs:
      - GetUser
      - GetGitRef
    if: ${{ (github.event.issue.pull_request && contains(github.event.comment.body, '/AzurePipelines run') && needs.GetUser.outputs.require-result == 'true' ) || github.event_name == 'push' }}
    runs-on: windows-2019
    env:
      PYTHON_VERSION: "3.9"
    timeout-minutes: 120
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{needs.GetGitRef.outputs.ref}}
      - name: Restore cached artifacts
        id: cache-usd-build-dependency
        uses: actions/cache/restore@v4
        with:
          path: |
            USDinst
          key: ${{ runner.os }}-BuildUSD-py${{ env.PYTHON_VERSION }}-${{ hashFiles('build_scripts/**/*') }}
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          check-latest: false
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install PyOpenGL PySide2
      - name: Build USD
        run: |
          # Not using '--tests' to avoid building extra dependencies that are unneeded for headless tests
          python build_scripts/build_usd.py --no-materialx --generator "Visual Studio 16 2019" --build USDgen/build --src USDgen/src USDinst --build-args USD,"-DPXR_ENABLE_PRECOMPILED_HEADERS=OFF -DPXR_HEADLESS_TEST_MODE=ON -DPXR_BUILD_TESTS=ON" -v
        shell: cmd
      - name: Save build artifacts to cache
        if: steps.cache-usd-build-dependency.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            USDinst
          key: ${{ steps.cache-usd-build-dependency.outputs.cache-primary-key }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: usd-win64
          path: USDinst
      - name: Test USD
        working-directory: ./USDgen/build/OpenUSD
        run: |
          call set PATH=D:\a\OpenUSD\OpenUSD\USDinst\bin;D:\a\OpenUSD\OpenUSD\USDinst\lib;D:\a\OpenUSD\OpenUSD\USDinst\share\usd\examples\plugin;D:\a\OpenUSD\OpenUSD\USDinst\plugin\usd;%PATH%
          call set PYTHONPATH=D:\a\OpenUSD\OpenUSD\USDinst\lib\python;%PYTHONPATH%
          # Internal ticket USD-8035
          ctest -V -C Release --exclude-regex "TfPathUtils"
        shell: cmd

