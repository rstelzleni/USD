name: PyPI_Packaging

# Trigger this build whenever this pipeline file is changed, or when setup.py
# or other supporting files are updated. This way we will build new pypi
# packages each time we update the version number, or any other information
# listed here or in setup.py, like supported python versions.
trigger:
    branches:
        include:
        - dev
        - release
        - pypi-builds
    paths:
        include:
        - azure-pypi-pipeline.yml
        - build_scripts/pypi/*.py
        - build_scripts/pypi/package_files/*
        exclude:
        - /
 
jobs:

    # Working!!
#- job: Linux_Build_for_PyPI
#  strategy:
#    matrix:
#      Python36:
#        PYTHON_INTERPRETER: /opt/python/cp36-cp36m/bin/python
#        PYTHON_TAG: cp36
#      Python37:
#        PYTHON_INTERPRETER: /opt/python/cp37-cp37m/bin/python
#        PYTHON_TAG: cp37
#      Python38:
#        PYTHON_INTERPRETER: /opt/python/cp38-cp38/bin/python
#        PYTHON_TAG: cp38
#  timeoutInMinutes: 90
#  pool:
#    vmImage: Ubuntu-18.04
#  container:
#    image: rstelzleni/usd-pypi-builder:latest
#    options: -v /home/vsts/USDinst:/opt/USD/inst -v /home/vsts/dist:/opt/USD/dist
#  steps:
#  - bash: |
#      AZURE_USER="$(whoami)"
#      sudo chown -R $AZURE_USER /opt/USD
#      sudo chmod -R 775 /opt/USD
#    displayName: 'Creating build output directory'
#  - bash: |
#      $(PYTHON_INTERPRETER)  build_scripts/build_usd.py --for-pypi --build-args USD,"-Xlinker --allow-shlib-undefined -DPXR_BUILD_USD_TOOLS=OFF -DPXR_INSTALL_LOCATION=../pxr/pluginfo" --no-imaging --no-examples --no-tutorials --build /opt/USD/gen/build --src /opt/USD/gen/src /opt/USD/inst -v
#    displayName: 'Building USD'
#  - task: PublishPipelineArtifact@0
#    inputs:
#      artifactName: usd-pypi-linux-$(PYTHON_TAG)
#      targetPath: /home/vsts/USDinst
#  - bash: |
#      mkdir ./packaging
#      cp -R /opt/USD/inst ./packaging
#      cp build_scripts/pypi/package_files/* ./packaging
#    displayName: "Creating packaging directory"
#  - bash: |
#      cd ./packaging
#      $(PYTHON_INTERPRETER) setup.py bdist_wheel --python-tag ${PYTHON_TAG}
#    displayName: 'Running setup.py'
#  - bash: |
#      PYTHONPATH=/opt/USD/pypi/lib/python LD_LIBRARY_PATH=/opt/USD/pypi/lib:$LD_LIBRARY_PATH auditwheel repair packaging/dist/*.whl
#    displayName: 'Running audtiwheel repair (moves .so files into package)'
#  - bash: |
#      WHEEL_PACKAGE_NAME=`ls wheelhouse`
#      $(PYTHON_INTERPRETER) build_scripts/pypi/updatePluginfos.py "wheelhouse/$WHEEL_PACKAGE_NAME" "/opt/USD/dist/$WHEEL_PACKAGE_NAME"
#    displayName: 'Updating pluginfo paths'
#  - task: PublishPipelineArtifact@0
#    inputs:
#      artifactName: dist-linux-$(PYTHON_TAG)
#      targetPath: /home/vsts/dist


# Current error 
#    LINK : fatal error LNK1104: cannot open file 'python36.lib' [D:\USDgen\build\s\pxr\base\tf\tf.vcxproj]
#  
- job: Windows_Build_for_PyPI
  strategy:
    matrix:
      Python36:
        PYTHON_VERSION_SPEC: 3.6
        PYTHON_TAG: cp36
        #      Python37:
        #PYTHON_INTERPRETER: /opt/python/cp37-cp37m/bin/python
        #PYTHON_TAG: cp37
        #Python38:
        #PYTHON_INTERPRETER: /opt/python/cp38-cp38m/bin/python
        #PYTHON_TAG: cp38
  timeoutInMinutes: 90
  pool:
    vmImage: 'VS2017-Win2016'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(PYTHON_VERSION_SPEC)
      addToPath: true
  - script: |
      call C:\"Program Files (x86)"\"Microsoft Visual Studio"\2017\Enterprise\VC\Auxiliary\Build\vcvars64.bat
      call set BOOST_ROOT=
      call python --version
      call python build_scripts/build_usd.py --for-pypi --build-args USD,"-DPXR_BUILD_USD_TOOLS=OFF -DPXR_INSTALL_LOCATION=../pxr/pluginfo" --no-imaging --no-examples --no-tutorials --build %HOME%/USDgen/build --src %HOME%/USDgen/src %HOME%/USDinst -v
    displayName: 'Building USD'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'usd-pypi-win64'
      targetPath: "D:/USDinst"
  - script: |
      dir
      mkdir D:\packaging
      xcopy /E /I %HOME%\USDinst D:\packaging\inst
      copy build_scripts\pypi\package_files\* D:\packaging
      dir D:\packaging
      dir D:\packaging\inst
    displayName: "Creating packaging directory"
  - script: |
      cd D:\packaging
      dir
      call python setup.py bdist_wheel --python-tag ${PYTHON_TAG} --plat-name win_amd64
    displayName: 'Running setup.py'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: dist-windows-$(PYTHON_TAG)
      targetPath: D:\packaging\dist

#- job: Mac_Build_for_PyPI
#  strategy:
#    matrix:
#      Python36:
#        PYTHON_VERSION_SPEC: 3.6
#        PYTHON_INTERPRETER: python3.6
#        PYTHON_TAG: cp36
#      Python37:
#        PYTHON_VERSION_SPEC: 3.7
#        PYTHON_INTERPRETER: python3.7
#        PYTHON_TAG: cp37
#      Python38:
#        PYTHON_VERSION_SPEC: 3.8
#        PYTHON_INTERPRETER: python3.8
#        PYTHON_TAG: cp38
#  timeoutInMinutes: 90
#  pool:
#    vmImage: 'macOS-10.14'
#  steps:
#  - task: UsePythonVersion@0
#    inputs:
#      versionSpec: $(PYTHON_VERSION_SPEC)
#      addToPath: true
#  - script: |
#      # The SYSTEM env var is used by the Makefile of glew and having it set trips it up
#      unset SYSTEM
#      /bin/bash -c "sudo xcode-select -s /Applications/Xcode_10.1.app/Contents/Developer"
#      $(PYTHON_INTERPRETER) build_scripts/build_usd.py --for-pypi --build-args USD,"-DPXR_BUILD_USD_TOOLS=OFF -DPXR_INSTALL_LOCATION=../pluginfo" --no-imaging --no-examples --no-tutorials --generator Xcode --build $HOME/USDgen/build --src $HOME/USDgen/src $HOME/USDinst -v
#    displayName: 'Building USD'
#  - task: PublishPipelineArtifact@0
#    inputs:
#      artifactName: usd-pypi-macOS-$(PYTHON_TAG)
#      targetPath: "/Users/runner/USDinst"
#  - bash: |
#      $(PYTHON_INTERPRETER) -m pip install delocate wheel
#    displayName: 'Installing python packages'
#  - bash: |
#      mkdir ./packaging
#      mkdir ./packaging/inst
#      cp -R $HOME/USDinst/* ./packaging/inst
#      cp build_scripts/pypi/package_files/* ./packaging
#    displayName: "Creating packaging directory"
#  - bash: |
#      cd ./packaging
#      $(PYTHON_INTERPRETER) setup.py bdist_wheel --python-tag ${PYTHON_TAG} --plat-name macosx_10_9_x86_64
#    displayName: 'Running setup.py'
#  - bash: |
#      delocate-wheel -v -w dist-delocated packaging/dist/*
#    displayName: 'Running delocate (moves shared lib files into package)'
#  - bash: |
#      WHEEL_PACKAGE_NAME=`ls ./packaging/dist`
#      mkdir -p ./dist
#      $(PYTHON_INTERPRETER)  build_scripts/pypi/updatePluginfos.py "./dist-delocated/$WHEEL_PACKAGE_NAME" "./dist/$WHEEL_PACKAGE_NAME"
#    displayName: 'Updating pluginfo paths'
#  - task: PublishPipelineArtifact@0
#    inputs:
#      artifactName: dist-mac-$(PYTHON_TAG)
#      targetPath: ./dist
